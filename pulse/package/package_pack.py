import click
import os
import logging
import tomli
import tomli_w
import re
import pulse.stroke.stroke as stroke
from typing import Literal
from .pack.pack import pack_folder
from .pack.pack_version import CALVER_RE, SEMVER_RE

@click.command()
@click.option('--platform', required=True, type=click.Choice(['windows', 'linux'], case_sensitive=False), default=None, help="Platform to pack for.")
def package(platform: str) -> None:
    # prompt for the version and prompt for initial version, should and will prompt for calver and semver
    versioning: str = click.prompt("Select your versioning", type=click.Choice(["calver", "semver"], case_sensitive=False), show_choices=True)
    click.echo(f"Since you'll be using {versioning} versioning as your versioning take into account for its pattern.")
    click.echo(f"Patterns like MAJOR.MINOR.PATCH are used for semver otherwise YEAR.MONTH.DAY for calver. Both of them can have beta or alpha titles appended.")
    click.echo(f"Examples for semver are 1.0.0, 0.1.0-alpha..." if versioning == "semver" else f"Examples for calver are 2024.04.20")
    version: str = click.prompt("Input your version. Take into account the option you've used before")
    
    # Check if valid versioning
    logging.debug("Checking version and its pattern...")
    if not re.match(SEMVER_RE, version) and versioning == "semver":
        logging.fatal("Fatal error occurred -> Invalid versioning pattern followed. Exit code: 41")
        stroke.dump(41, "Semantic Versioning (semver) scheme hasn't been followed properly.")
        return

    elif not re.match(CALVER_RE, version) and versioning == "calver":
        logging.fatal("Fatal error occurred -> Invalid versioning pattern followed. Exit code: 41")
        stroke.dump(41, "Calendar Versioning (calver) scheme hasn't been followed properly.")
        return

    logging.info("Version pattern checking successful!")
    pack(versioning=versioning, version=version, platform=platform)

def pack(versioning: str, version: str, platform: click.Choice(['windows', 'linux'], case_sensitive=False)) -> None:

    logging.debug(f"Packing the release...\nVERSION: {version}\nPLATFORM: {platform}")
    if not os.path.exists(os.path.join(os.getcwd(), "pulse.toml")):
        logging.fatal("Fatal error occurred -> Invalid Pulse package. Exit code: 2")
        stroke.dump(2)
        return

    with open("pulse.toml", 'rb') as toml_config:
        data = tomli.load(toml_config)

    if not ('resources' in data and platform in data['resources']):
        logging.fatal("Fatal error occurred -> No resources table has been specified. Exit code: 42")
        stroke.dump(42)
        return

    if not "release_folder" in data[f"resources"][platform]:
        logging.fatal("Fatal error occurred -> No release_folder has been specified within resources table. Exit code: 43")
        stroke.dump(43)
        return

    elif not os.path.exists(data[f"resources"][platform]["release_folder"]):
        logging.fatal("Fatal error occurred -> release_folder has been specified within resources table, but it doesn't exists within current working directory. Exit code: 44")
        stroke.dump(44)
        return
    
    if not os.listdir(os.path.join(os.getcwd(), data[f"resources"][platform]["release_folder"])):
        logging.fatal("Fatal error occurred -> release_folder has been specified within resources table and is present, but empty. Exit code: 45")
        stroke.dump(45)
        return

    release_data = {
        "versioning": versioning,
        "version": version
    }
    
    if os.path.isfile(os.path.join(os.getcwd(), "package.rel")):
        logging.fatal("Fatal error occurred -> Release has been staged already. Exit code: 46")
        stroke.dump(46)
        return

    with open("package.rel", "wb") as f:
        f.write(b"# This file was generated by Pulse, don't modify it by hand, or you will end up with impossibility of releasing the package.\n\n")
        tomli_w.dump(release_data, f)

    with open("package.rel", "rb") as ff:
        datax = tomli.load(ff)
        
    pack_folder(data["project"]["repo"], version, data[f"resources"][platform]["release_folder"], platform)
    logging.info(f"Succesfully packed release {version}")