import click
import os
import logging
import tomli
import tomli_w
from typing import Literal
from .pack.pack import pack_folder

@click.command()
@click.option('--platform', required=True, type=click.Choice(['windows', 'linux'], case_sensitive=False), default=None, help="Platform to pack for.")
def package(platform: str) -> None:
    print(platform)
    # prompt for the version and prompt for initial version, should and will prompt for calver and semver
    versioning: str = click.prompt("Select your versioning", type=click.Choice(["calver", "semver"], case_sensitive=False), show_choices=True)
    click.echo(f"Since you'll be using {versioning} versioning as your versioning take into account for its pattern.")
    click.echo(f"Patterns like MAJOR.MINOR.PATCH are used for semver otherwise YEAR.MONTH.DAY for calver. Both of them can have beta or alpha titles appended.")
    click.echo(f"Examples for semver are 1.0.0, 0.1.0-alpha..." if versioning == "semver" else f"Examples for calver are 2024.04.20")
    version: str = click.prompt("Input your version. Take into account the option you've used before")
# ADD VERSIONING CHECK
    pack(versioning=versioning, version=version, platform=platform)

    pass

def pack(versioning: str, version: str, platform: click.Choice(['windows', 'linux'], case_sensitive=False)) -> None:

    logging.debug(f"Packing the release.\nVERSION: {version}\nPLATFORM: {platform}")
    if not os.path.exists(os.path.join(os.getcwd(), "pulse.toml")):
        logging.error("This is not a Pulse package!")
        return

    with open("pulse.toml", 'rb') as toml_config:
        data = tomli.load(toml_config)

    print(f"resources.{platform}")
    if not ('resources' in data and platform in data['resources']):
        print("No resource table")
        return

    if not "release_folder" in data[f"resources"][platform]:
        print("No rel folder anywhere")
        return

    elif not os.path.exists(data[f"resources"][platform]["release_folder"]):
        print("No folder")
        return
    
    if not os.listdir(os.path.join(os.getcwd(), data[f"resources"][platform]["release_folder"])):
        print("Empty folder")
        return

    pack_folder(data["project"]["repo"], version, data[f"resources"][platform]["release_folder"], platform)
    print(f"Succesfully packed release {version}")

    release_data = {
        "versioning": versioning,
        "version": version
    }
    
    with open("package.rel", "wb") as f:
        f.write(b"# This file was generated by Pulse, don't modify it by hand, or you will end up with impossibility of releasing the package.\n\n")
        tomli_w.dump(release_data, f)

    with open("package.rel", "rb") as ff:
        datax = tomli.load(ff)
        print(datax)
        